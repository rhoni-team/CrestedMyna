# Generated by Django 5.1.1 on 2024-11-08 18:39
""" SQL PostGis command to join the two layers of cities and remove duplicates
to obtain a unique layer of cities of the world.
"""

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('data_loading', '0008_sql_populate_country_with_ac_record'),
    ]

    operations = [
        migrations.RunSQL(
            """
            -- Update coordinates of Cities from ESRI shapefile
            UPDATE data_loading_citiesesri
                SET lat = ROUND(CAST(ST_Y(ST_Transform(geom, 4326)) AS NUMERIC), 3),
                    lon = ROUND(CAST(ST_X(ST_Transform(geom, 4326)) AS NUMERIC), 3);
            
            -- Round coordinate of Cities from imb shapefile
            UPDATE data_loading_citiesimb
                SET lat = ROUND(CAST(lat AS NUMERIC), 3),
                    lon = ROUND(CAST(lon AS NUMERIC), 3);

            -- Populate the iso2 field with the country code for imb shapefile
            UPDATE data_loading_citiesimb
                SET iso2 = LEFT("genc1", 2);

            -- Create views for temporary data management
            CREATE or replace VIEW esri_cities_view as
            SELECT 
                iso2,
                LOWER(city_name) as city_name,
                population,
                lon,
                lat,
                geom
            from data_loading_citiesesri;

            CREATE or replace VIEW imb_cities_view as
            SELECT 
                iso2,
                lOWER("city_name") as city_name,
                population,
                lon,
                lat,
                geom
            from data_loading_citiesimb;

            -- Join the two views and remove duplicates
            CREATE or replace VIEW world_cities_view as
            SELECT * FROM esri_cities_view
            UNION
            SELECT * FROM imb_cities_view;

            -- Create a view with a first filtering to get unique cities
            CREATE or replace VIEW unique_cities_first_filter as
            SELECT DISTINCT ON (city_name, iso2) *
            FROM world_cities_view
            ORDER BY city_name, iso2;

            -- Create a view with a second filtering to get unique cities
            CREATE or replace VIEW unique_cities_second_filter as
            SELECT DISTINCT ON (lat, lon) *
            FROM unique_cities_first_filter
            ORDER BY lat, lon;

            -- Update the Cities model with the unique cities
            INSERT INTO data_loading_cities(city_name, population, iso2, lat, lon, geom)
            SELECT city_name, population, iso2, lat, lon, geom
            FROM unique_cities_second_filter;

            -- Drop the temporary views
            DROP VIEW unique_cities_second_filter;
            DROP VIEW unique_cities_first_filter;
            DROP VIEW world_cities_view;
            DROP VIEW esri_cities_view;
            DROP VIEW imb_cities_view;
            """
        )
    ]
